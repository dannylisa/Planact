{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _userSchedules = require(\"../../modules/userSchedules\");\n\nvar _jsxFileName = \"C:\\\\Users\\\\rjqnr\\\\src\\\\planact\\\\src\\\\screens\\\\home\\\\EventView.tsx\";\n\nfunction EventView(props) {\n  var abb = props.abb,\n      title = props.title,\n      schedule_id = props.schedule_id,\n      index = props.index,\n      selected = props.selected;\n  var theme = (0, _reactRedux.useSelector)(function (state) {\n    return state.theme;\n  });\n  var schedule = (0, _userSchedules.getScheduleById)(schedule_id);\n  var color = (schedule == null ? void 0 : schedule.color) || '#333';\n\n  var _styles = styles(theme, {\n    color: color\n  }),\n      container = _styles.container,\n      iconContainer = _styles.iconContainer,\n      icon = _styles.icon,\n      contentWrapper = _styles.contentWrapper,\n      content = _styles.content;\n\n  return _react.default.createElement(_reactNative.View, {\n    style: [container, selected === index && {\n      backgroundColor: theme.selected\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: iconContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNative.Image, {\n    source: require(\"../../assets/icons/tread.png\"),\n    style: {\n      width: 24,\n      height: 24,\n      tintColor: color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  })), _react.default.createElement(_reactNative.View, {\n    style: contentWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar styles = function styles(theme, _ref) {\n  var color = _ref.color;\n  var content = theme.content,\n      text = theme.text;\n  return _reactNative.StyleSheet.create({\n    container: {\n      backgroundColor: content,\n      height: 20,\n      flexDirection: 'row'\n    },\n    iconContainer: {\n      flex: 1,\n      paddingTop: 2.5,\n      paddingBottom: 3.5,\n      paddingLeft: 3,\n      paddingRight: 5\n    },\n    icon: {\n      backgroundColor: color,\n      flex: 1,\n      borderRadius: 50\n    },\n    contentWrapper: {\n      flex: 6\n    },\n    content: {\n      color: text\n    }\n  });\n};\n\nvar _default = EventView;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/rjqnr/src/planact/src/screens/home/EventView.tsx"],"names":["EventView","props","abb","title","schedule_id","index","selected","theme","state","schedule","color","styles","container","iconContainer","icon","contentWrapper","content","backgroundColor","require","width","height","tintColor","text","StyleSheet","create","flexDirection","flex","paddingTop","paddingBottom","paddingLeft","paddingRight","borderRadius"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { IUserEvent } from '@/utils/data'\r\nimport { TouchableOpacity, View, Text, StyleSheet, Alert } from 'react-native'\r\nimport { DefaultTheme } from '@/style/styled'\r\nimport { useSelector } from 'react-redux'\r\nimport { GlobalState } from '@modules/index'\r\nimport { getScheduleById } from '@modules/userSchedules'\r\nimport { MaterialIcons } from '@expo/vector-icons'\r\nimport { Image } from 'react-native'\r\n\r\ninterface EventViewProps extends IUserEvent {\r\n  selected: number\r\n  index: number\r\n}\r\n\r\nfunction EventView(props: EventViewProps) {\r\n  const { abb, title, schedule_id, index, selected } = props\r\n  const theme = useSelector((state: GlobalState) => state.theme)\r\n  const schedule = getScheduleById(schedule_id)\r\n  const color = schedule?.color || '#333'\r\n  const { container, iconContainer, icon, contentWrapper, content } = styles(\r\n    theme,\r\n    { color }\r\n  )\r\n  return (\r\n    <View\r\n      style={[\r\n        container,\r\n        selected === index && { backgroundColor: theme.selected },\r\n      ]}\r\n    >\r\n      <View style={iconContainer}>\r\n        {/* <MaterialIcons name=\"fitness-center\" size={24} color={color} /> */}\r\n        <Image\r\n          source={require('@/assets/icons/tread.png')}\r\n          style={{\r\n            width: 24,\r\n            height: 24,\r\n            // backgroundColor: color,\r\n            tintColor: color,\r\n          }}\r\n        />\r\n        <View style={icon} />\r\n      </View>\r\n      <View style={contentWrapper}>\r\n        {/* <Text style={[content, selected === index && { color: '#fff' }]}>\r\n          {abb}\r\n        </Text> */}\r\n        {/* <MaterialIcons name=\"fitness-center\" size={24} color={color} /> */}\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n\r\ninterface EventViewStyleProps {\r\n  color: string\r\n}\r\nconst styles = (theme: DefaultTheme, { color }: EventViewStyleProps) => {\r\n  const { content, text } = theme\r\n  return StyleSheet.create({\r\n    container: {\r\n      backgroundColor: content,\r\n      height: 20,\r\n      flexDirection: 'row',\r\n    },\r\n    iconContainer: {\r\n      flex: 1,\r\n      paddingTop: 2.5,\r\n      paddingBottom: 3.5,\r\n      paddingLeft: 3,\r\n      paddingRight: 5,\r\n    },\r\n    icon: {\r\n      backgroundColor: color,\r\n      flex: 1,\r\n      borderRadius: 50,\r\n    },\r\n    contentWrapper: {\r\n      flex: 6,\r\n    },\r\n    content: {\r\n      color: text,\r\n    },\r\n  })\r\n}\r\n\r\nexport default EventView\r\n"]},"metadata":{},"sourceType":"script"}