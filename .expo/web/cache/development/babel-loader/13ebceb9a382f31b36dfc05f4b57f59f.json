{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.SCHEDULES_FETCH = exports.getScheduleById = void 0;\n\nvar _reactRedux = require(\"react-redux\");\n\nvar getScheduleById = function getScheduleById(schedule_id) {\n  var schedules = (0, _reactRedux.useSelector)(function (_ref) {\n    var userSchedules = _ref.userSchedules;\n    return userSchedules;\n  });\n  return schedules.find(function (schedule) {\n    return schedule.schedule_id == schedule_id;\n  });\n};\n\nexports.getScheduleById = getScheduleById;\nvar SCHEDULES_FETCH = 'schedules/fetch';\nexports.SCHEDULES_FETCH = SCHEDULES_FETCH;\n\nvar userSchedules = function userSchedules() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var type = action.type,\n      schedules = action.schedules;\n\n  switch (type) {\n    case 'schedules/fetch':\n      return schedules;\n\n    default:\n      return state;\n  }\n};\n\nvar _default = userSchedules;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/rjqnr/src/planact/src/modules/userSchedules.ts"],"names":["getScheduleById","schedule_id","schedules","userSchedules","find","schedule","SCHEDULES_FETCH","state","action","type"],"mappings":";;;;;AACA;;AAQO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,WAAD,EAAyB;AACtD,MAAMC,SAAS,GAAG,6BAChB;AAAA,QAAGC,aAAH,QAAGA,aAAH;AAAA,WAAoCA,aAApC;AAAA,GADgB,CAAlB;AAGA,SAAOD,SAAS,CAACE,IAAV,CAAe,UAACC,QAAD;AAAA,WAAcA,QAAQ,CAACJ,WAAT,IAAwBA,WAAtC;AAAA,GAAf,CAAP;AACD,CALM;;;AAOA,IAAMK,eAAe,GAAG,iBAAxB;;;AACP,IAAMH,aAAa,GAAG,SAAhBA,aAAgB,GAAqD;AAAA,MAApDI,KAAoD,uEAA/B,EAA+B;AAAA,MAA3BC,MAA2B;AACzE,MAAQC,IAAR,GAA4BD,MAA5B,CAAQC,IAAR;AAAA,MAAcP,SAAd,GAA4BM,MAA5B,CAAcN,SAAd;;AACA,UAAQO,IAAR;AACE,SAAK,iBAAL;AACE,aAAOP,SAAP;;AACF;AACE,aAAOK,KAAP;AAJJ;AAMD,CARD;;eAUeJ,a","sourcesContent":["import { ISchedule } from '@/utils/data'\r\nimport { useSelector } from 'react-redux'\r\nimport { GlobalState } from '.'\r\n\r\ninterface scheduleAction {\r\n  type: string\r\n  schedules: ISchedule[]\r\n}\r\n\r\nexport const getScheduleById = (schedule_id: string) => {\r\n  const schedules = useSelector(\r\n    ({ userSchedules }: GlobalState) => userSchedules\r\n  )\r\n  return schedules.find((schedule) => schedule.schedule_id == schedule_id)\r\n}\r\n\r\nexport const SCHEDULES_FETCH = 'schedules/fetch' as const\r\nconst userSchedules = (state: ISchedule[] = [], action: scheduleAction) => {\r\n  const { type, schedules } = action\r\n  switch (type) {\r\n    case 'schedules/fetch':\r\n      return schedules\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default userSchedules\r\n"]},"metadata":{},"sourceType":"script"}